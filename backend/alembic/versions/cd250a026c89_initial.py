"""initial

Revision ID: cd250a026c89
Revises: 
Create Date: 2025-04-03 12:17:43.796695

"""
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision = 'cd250a026c89'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('auto_test',
    sa.Column('id', sa.String(length=132), nullable=False, comment='md5 hash from class_name, method_name, iteration_name, filepath columns'),
    sa.Column('class_name', sa.String(length=100), nullable=False, comment='Autotest class name'),
    sa.Column('method_name', sa.String(length=100), nullable=False, comment='Autotest method name'),
    sa.Column('iteration_name', sa.String(length=100), nullable=False, comment='Autotest iteration name'),
    sa.Column('root_folder', sa.String(length=100), nullable=False, comment='The root folder to which the test belongs'),
    sa.Column('filepath', sa.String(length=500), nullable=False, comment='Autotest full path in code base'),
    sa.Column('params', sa.JSON(), nullable=False, comment='Autotest params'),
    sa.Column('supported_from', sa.String(length=10), nullable=False, comment='Code version from which (inclusive) this test is supported'),
    sa.Column('supported_to', sa.String(length=10), nullable=False, comment='Code version to which (inclusive) this test is supported'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Is this test supported now?'),
    sa.Column('description', sa.Text(), nullable=True, comment='Autotest description'),
    sa.Column('required_run_config', sa.JSON(), nullable=True, comment='Autotest configuration that must be filled before launch this test'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_auto_test_id'), 'auto_test', ['id'], unique=True)
    op.create_table('auto_test_environment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('param', sa.String(length=100), nullable=False),
    sa.Column('env', sa.String(length=50), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('secure', sa.Boolean(), nullable=True, comment='Values of secure params are not saved to the database.'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('param', 'env', name='parameter_for_particular_env')
    )
    op.create_index(op.f('ix_auto_test_environment_id'), 'auto_test_environment', ['id'], unique=False)
    op.create_table('load_test',
    sa.Column('id', sa.String(length=132), nullable=False, comment='load test name plus md5(load test params)'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Load Test real code name'),
    sa.Column('display_name', sa.String(length=100), nullable=False, comment='Load Test display name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Load Test description'),
    sa.Column('root_folder', sa.String(length=100), nullable=False, comment='The root folder to which the load test belongs'),
    sa.Column('filepath', sa.String(length=500), nullable=False, comment='Load Test full path in code base'),
    sa.Column('params', sa.JSON(), nullable=False, comment='Load Test launch parameters'),
    sa.Column('charts', sa.JSON(), nullable=False, comment='Charts config that load test produces'),
    sa.Column('config', sa.JSON(), nullable=False, comment='Load test execution config'),
    sa.Column('supported_from', sa.String(length=10), nullable=False, comment='Code version from which (inclusive) this load test is supported.'),
    sa.Column('supported_to', sa.String(length=10), nullable=False, comment='Code version to which (inclusive) this load test is supported.'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_load_test_id'), 'load_test', ['id'], unique=True)
    op.create_table('script',
    sa.Column('id', sa.String(length=132), nullable=False, comment='script_name plus md5(script params)'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Script real code name'),
    sa.Column('display_name', sa.String(length=100), nullable=False, comment='Script display name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Script description'),
    sa.Column('root_folder', sa.String(length=100), nullable=False, comment='The root folder to which the script belongs'),
    sa.Column('filepath', sa.String(length=500), nullable=False, comment='Script full path in code base'),
    sa.Column('params', sa.JSON(), nullable=False, comment='Script launch parameters'),
    sa.Column('supported_from', sa.String(length=10), nullable=False, comment='Code version from which (inclusive) this script is supported.'),
    sa.Column('supported_to', sa.String(length=10), nullable=False, comment='Code version to which (inclusive) this script is supported.'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_script_id'), 'script', ['id'], unique=True)
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('full_name', sa.String(length=50), nullable=False),
    sa.Column('password', sa.String(length=100), nullable=False),
    sa.Column('disabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_full_name'), 'user', ['full_name'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('script_history',
    sa.Column('id', sa.String(length=132), nullable=False, comment='UUID of script execution'),
    sa.Column('script_id', sa.String(length=132), nullable=True),
    sa.Column('params', sa.JSON(), nullable=False, comment='Script launch parameter values'),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Script execution final status'),
    sa.Column('root_folder', sa.String(length=100), nullable=False, comment='The root folder to which the script belongs'),
    sa.Column('environment', sa.String(length=50), nullable=False, comment='Environment on which the script was executed'),
    sa.Column('env_used', sa.JSON(), nullable=False, comment='Environment variables used during script execution'),
    sa.Column('result_type', sa.String(length=50), nullable=True, comment='Type of result of a successfully executed script'),
    sa.Column('result', sa.JSON(), nullable=True, comment='Result of a successfully executed script'),
    sa.Column('errors', sa.JSON(), nullable=True, comment='Script execution errors'),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['script_id'], ['script.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_script_history_id'), 'script_history', ['id'], unique=True)
    op.create_table('test_run_history',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Test run UUIDv4'),
    sa.Column('status', sa.Enum('idle', 'pending', 'primed', 'running', 'success', 'fail', name='testrunstatus'), nullable=False, comment='Test run status'),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('version', sa.String(length=10), nullable=False, comment='Code version to which this test run belongs to'),
    sa.Column('root_folder', sa.String(length=100), nullable=False, comment='The root folder to which the test run belongs'),
    sa.Column('environment', sa.String(length=50), nullable=False, comment='Environment on which the test run was executed'),
    sa.Column('run_config', sa.JSON(), nullable=False, comment='The configuration set of test run'),
    sa.Column('result_by_status', sa.JSON(), nullable=False, comment='Test statuses by groups'),
    sa.Column('error', sa.JSON(), nullable=True, comment='Test run error. Can be null'),
    sa.Column('start_time', mysql.DATETIME(), nullable=False),
    sa.Column('group_ids', sa.JSON(), nullable=False, comment='Test run groups'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_run_history_id'), 'test_run_history', ['id'], unique=True)
    op.create_table('auto_test_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_id', sa.String(length=132), nullable=True),
    sa.Column('test_run_id', sa.String(length=36), nullable=True),
    sa.Column('run_config', sa.JSON(), nullable=False, comment='The configuration set on autotest run'),
    sa.Column('groups', sa.JSON(), nullable=False, comment='Auto test history groups'),
    sa.Column('status', sa.Enum('pending', 'success', 'fail', name='statusenum'), nullable=False, comment='Autotest final status'),
    sa.Column('stages', sa.JSON(), nullable=False, comment='Json with autotest stages and steps data'),
    sa.Column('env_used', sa.JSON(), nullable=False, comment='Environment variables used during test'),
    sa.Column('warnings', sa.JSON(), nullable=True, comment='Warnings that occurred during the test'),
    sa.Column('assets_path', sa.JSON(), nullable=False, comment='Path to autotest assets directory'),
    sa.Column('generated_params', sa.JSON(), nullable=False, comment='Variables generated during test'),
    sa.Column('errors', sa.JSON(), nullable=True, comment='Autotest errors'),
    sa.ForeignKeyConstraint(['test_id'], ['auto_test.id'], ),
    sa.ForeignKeyConstraint(['test_run_id'], ['test_run_history.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_auto_test_history_id'), 'auto_test_history', ['id'], unique=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_auto_test_history_id'), table_name='auto_test_history')
    op.drop_table('auto_test_history')
    op.drop_index(op.f('ix_test_run_history_id'), table_name='test_run_history')
    op.drop_table('test_run_history')
    op.drop_index(op.f('ix_script_history_id'), table_name='script_history')
    op.drop_table('script_history')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_full_name'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_script_id'), table_name='script')
    op.drop_table('script')
    op.drop_index(op.f('ix_load_test_id'), table_name='load_test')
    op.drop_table('load_test')
    op.drop_index(op.f('ix_auto_test_environment_id'), table_name='auto_test_environment')
    op.drop_table('auto_test_environment')
    op.drop_index(op.f('ix_auto_test_id'), table_name='auto_test')
    op.drop_table('auto_test')
    # ### end Alembic commands ###
